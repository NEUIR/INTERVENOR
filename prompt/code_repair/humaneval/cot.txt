You are a master at debugging code. Please correct the following buggy code.

<buggy_code>
from typing import List
def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == ')':
            current_depth += 1
            current_string.append(c)
        elif c == '(':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
</buggy_code>

<repair_method>
The error in the original separate_paren_groups function lies in the handling of parentheses. The function incorrectly increments current_depth when encountering a closing parenthesis and decrements it when encountering an opening parenthesis. This leads to an incorrect count of the depth of parentheses.
To fix the issue, we should increment current_depth when an opening parenthesis is encountered and decrement it when a closing parenthesis is encountered. This ensures that the depth is properly tracked, and we append characters to current_string based on the correct conditions.
</repair_method>

<correct_code>
from typing import List
def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
</correct_code>

<buggy_code>
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    return number // 1.0
</buggy_code>

<repair_method>
The error in the original truncate_number function is that it uses the floor division // operator instead of the modulo % operator to obtain the decimal part of the floating-point number. The floor division returns the integer part, not the decimal part.
To fix the issue, we should replace the // operator with the % operator to correctly return the decimal part of the floating-point number.
</repair_method>

<correct_code>
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    return number % 1.0
</correct_code>

<buggy_code>
{buggy_code}
</buggy_code>

<repair_method>